
STM32F4_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039dc  080039dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080039f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080039f0  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4a4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002093  00000000  00000000  0002c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e70  00000000  00000000  0002f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b71b  00000000  00000000  00045590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086021  00000000  00000000  00050cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6ccc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ac  00000000  00000000  000d6d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003584 	.word	0x08003584

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003584 	.word	0x08003584

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <crc32>:
#include "CRC32.h"

uint32_t crc32( const uint8_t *buf, uint32_t len) {
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
    const uint8_t *p;
    int nr;
    uint32_t crc;

    crc = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
    for (nr = len, p = buf; nr--; ++p) {
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e00e      	b.n	8000506 <crc32+0x36>
        COMPUTE(crc, *p);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	021a      	lsls	r2, r3, #8
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	0e1b      	lsrs	r3, r3, #24
 80004f0:	6979      	ldr	r1, [r7, #20]
 80004f2:	7809      	ldrb	r1, [r1, #0]
 80004f4:	404b      	eors	r3, r1
 80004f6:	4916      	ldr	r1, [pc, #88]	; (8000550 <crc32+0x80>)
 80004f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004fc:	4053      	eors	r3, r2
 80004fe:	60fb      	str	r3, [r7, #12]
    for (nr = len, p = buf; nr--; ++p) {
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	3301      	adds	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	613a      	str	r2, [r7, #16]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1eb      	bne.n	80004e8 <crc32+0x18>
    }

    for (; len != 0; len >>= 8) {
 8000510:	e00e      	b.n	8000530 <crc32+0x60>
        COMPUTE(crc, len & 0xff);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	021a      	lsls	r2, r3, #8
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	0e19      	lsrs	r1, r3, #24
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	404b      	eors	r3, r1
 8000520:	490b      	ldr	r1, [pc, #44]	; (8000550 <crc32+0x80>)
 8000522:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000526:	4053      	eors	r3, r2
 8000528:	60fb      	str	r3, [r7, #12]
    for (; len != 0; len >>= 8) {
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1ed      	bne.n	8000512 <crc32+0x42>
    }
    buf-=len;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	425b      	negs	r3, r3
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
    return(~crc);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	43db      	mvns	r3, r3
 8000544:	4618      	mov	r0, r3
 8000546:	371c      	adds	r7, #28
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	080035bc 	.word	0x080035bc

08000554 <Frame_SendResponseFrame>:
#include "Frame.h"


void Frame_SendResponseFrame(defResponseType response){
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	defResponsePacket res_fr = {
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	2303      	movs	r3, #3
 800056e:	727b      	strb	r3, [r7, #9]
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	817b      	strh	r3, [r7, #10]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	733b      	strb	r3, [r7, #12]
 800057a:	2301      	movs	r3, #1
 800057c:	753b      	strb	r3, [r7, #20]
			.DataLength = {0x00, 0x01,},
			.Command = response,
			.Eof = EOF_SIGNAL,
	};

	res_fr.Crc.DataUint32 = crc32(&response, 1);
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffa4 	bl	80004d0 <crc32>
 8000588:	4603      	mov	r3, r0
 800058a:	613b      	str	r3, [r7, #16]

	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Sof, 1, 1000);
 800058c:	f107 0108 	add.w	r1, r7, #8
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	2201      	movs	r2, #1
 8000596:	481b      	ldr	r0, [pc, #108]	; (8000604 <Frame_SendResponseFrame+0xb0>)
 8000598:	f001 ff99 	bl	80024ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Type, 1, 1000);
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	1c59      	adds	r1, r3, #1
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2201      	movs	r2, #1
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <Frame_SendResponseFrame+0xb0>)
 80005aa:	f001 ff90 	bl	80024ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)res_fr.DataLength, 2, 1000);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	1c99      	adds	r1, r3, #2
 80005b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b8:	2202      	movs	r2, #2
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <Frame_SendResponseFrame+0xb0>)
 80005bc:	f001 ff87 	bl	80024ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Command, 1, 1000);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	1d19      	adds	r1, r3, #4
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	2201      	movs	r2, #1
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <Frame_SendResponseFrame+0xb0>)
 80005ce:	f001 ff7e 	bl	80024ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)res_fr.Crc.DataArray, 4, 1000);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	f103 0108 	add.w	r1, r3, #8
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	2204      	movs	r2, #4
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <Frame_SendResponseFrame+0xb0>)
 80005e2:	f001 ff74 	bl	80024ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Eof, 1, 1000);
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	f103 010c 	add.w	r1, r3, #12
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <Frame_SendResponseFrame+0xb0>)
 80005f6:	f001 ff6a 	bl	80024ce <HAL_UART_Transmit>
}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000b8 	.word	0x200000b8

08000608 <Frame_ReadStartFrame>:


defReturnType Frame_ReadStartFrame(){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
	uint8_t buf[COMMAND_FRAME_LENGHT] = {0,};
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	809a      	strh	r2, [r3, #4]

	HAL_UART_Receive(&MY_UART, buf, COMMAND_FRAME_LENGHT, 3000);
 800061c:	1d39      	adds	r1, r7, #4
 800061e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000622:	220a      	movs	r2, #10
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <Frame_ReadStartFrame+0x50>)
 8000626:	f001 ffe4 	bl	80025f2 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(buf[COMMAND_FRAME_LENGHT - 1]  == EOF_SIGNAL)))
 800062a:	793b      	ldrb	r3, [r7, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <Frame_ReadStartFrame+0x2e>
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d001      	beq.n	800063a <Frame_ReadStartFrame+0x32>
		return HANDLE_FAILED;
 8000636:	2301      	movs	r3, #1
 8000638:	e00a      	b.n	8000650 <Frame_ReadStartFrame+0x48>

	if(buf[1] != COMMAND_TYPE) return HANDLE_FAILED;
 800063a:	797b      	ldrb	r3, [r7, #5]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <Frame_ReadStartFrame+0x3c>
 8000640:	2301      	movs	r3, #1
 8000642:	e005      	b.n	8000650 <Frame_ReadStartFrame+0x48>

	if(buf[4] != START_COMMAND) return HANDLE_FAILED;
 8000644:	7a3b      	ldrb	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <Frame_ReadStartFrame+0x46>
 800064a:	2301      	movs	r3, #1
 800064c:	e000      	b.n	8000650 <Frame_ReadStartFrame+0x48>

	return HANDLE_OK;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000b8 	.word	0x200000b8

0800065c <Frame_ReadStopFrame>:


defReturnType Frame_ReadStopFrame(){
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
	uint8_t buf[COMMAND_FRAME_LENGHT] = {0,};
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	809a      	strh	r2, [r3, #4]

	HAL_UART_Receive(&MY_UART, buf, COMMAND_FRAME_LENGHT, 3000);
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000676:	220a      	movs	r2, #10
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <Frame_ReadStopFrame+0x30>)
 800067a:	f001 ffba 	bl	80025f2 <HAL_UART_Receive>

	if(!((buf[0] = SOF_SIGNAL)&&(buf[COMMAND_FRAME_LENGHT - 1]  = EOF_SIGNAL)))
 800067e:	2300      	movs	r3, #0
 8000680:	713b      	strb	r3, [r7, #4]
		return HANDLE_FAILED;
 8000682:	2301      	movs	r3, #1
	if(buf[1] != COMMAND_TYPE) return HANDLE_FAILED;

	if(buf[4] != STOP_COMMAND) return HANDLE_FAILED;

	return HANDLE_OK;
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000b8 	.word	0x200000b8

08000690 <Frame_ReadHeaderFrame>:


defReturnType Frame_ReadHeaderFrame(){
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
	uint8_t buf[HEADER_FRAME_LENGHT] = {0,};
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	721a      	strb	r2, [r3, #8]
	uint32To4Bytes crc_merge;
	HAL_UART_Receive(&MY_UART, (uint8_t *) buf, HEADER_FRAME_LENGHT, 3000);
 80006a6:	1d39      	adds	r1, r7, #4
 80006a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006ac:	220d      	movs	r2, #13
 80006ae:	4816      	ldr	r0, [pc, #88]	; (8000708 <Frame_ReadHeaderFrame+0x78>)
 80006b0:	f001 ff9f 	bl	80025f2 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(buf[HEADER_FRAME_LENGHT - 1]  == EOF_SIGNAL)))
 80006b4:	793b      	ldrb	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <Frame_ReadHeaderFrame+0x30>
 80006ba:	7c3b      	ldrb	r3, [r7, #16]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d001      	beq.n	80006c4 <Frame_ReadHeaderFrame+0x34>
		return HANDLE_FAILED;
 80006c0:	2301      	movs	r3, #1
 80006c2:	e01d      	b.n	8000700 <Frame_ReadHeaderFrame+0x70>

	crc_merge.DataArray[0] = buf[11];
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	703b      	strb	r3, [r7, #0]
	crc_merge.DataArray[1] = buf[10];
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
 80006ca:	707b      	strb	r3, [r7, #1]
	crc_merge.DataArray[2] = buf[9];
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	70bb      	strb	r3, [r7, #2]
	crc_merge.DataArray[3] = buf[8];
 80006d0:	7b3b      	ldrb	r3, [r7, #12]
 80006d2:	70fb      	strb	r3, [r7, #3]

	if(buf[1] != HEADER_TYPE) return HANDLE_FAILED;
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d001      	beq.n	80006de <Frame_ReadHeaderFrame+0x4e>
 80006da:	2301      	movs	r3, #1
 80006dc:	e010      	b.n	8000700 <Frame_ReadHeaderFrame+0x70>

	uint32_t crc_header = crc32((uint8_t*)(&buf[0] + 4), 4);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	3304      	adds	r3, #4
 80006e2:	2104      	movs	r1, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fef3 	bl	80004d0 <crc32>
 80006ea:	6178      	str	r0, [r7, #20]

	if(crc_header != crc_merge.DataUint32) return HANDLE_FAILED;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d001      	beq.n	80006f8 <Frame_ReadHeaderFrame+0x68>
 80006f4:	2301      	movs	r3, #1
 80006f6:	e003      	b.n	8000700 <Frame_ReadHeaderFrame+0x70>
	Frame_NumberOfKbyteData = buf[6]*256 + buf[7];
 80006f8:	7afa      	ldrb	r2, [r7, #11]
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <Frame_ReadHeaderFrame+0x7c>)
 80006fc:	701a      	strb	r2, [r3, #0]

	return HANDLE_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000b8 	.word	0x200000b8
 800070c:	20000028 	.word	0x20000028

08000710 <Frame_ReadDataFrame>:


defReturnType Frame_ReadDataFrame(uint8_t* data){
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint32To4Bytes crc_merge;
	uint8_t buf[4];

	HAL_UART_Receive(&MY_UART, buf, 4, 1000);
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	2204      	movs	r2, #4
 8000722:	482b      	ldr	r0, [pc, #172]	; (80007d0 <Frame_ReadDataFrame+0xc0>)
 8000724:	f001 ff65 	bl	80025f2 <HAL_UART_Receive>
	Frame_DataLenghtPerFrame = buf[2]*256 + buf[3];
 8000728:	7bbb      	ldrb	r3, [r7, #14]
 800072a:	b29b      	uxth	r3, r3
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b29a      	uxth	r2, r3
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	b29b      	uxth	r3, r3
 8000734:	4413      	add	r3, r2
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 800073a:	801a      	strh	r2, [r3, #0]

	HAL_UART_Receive(&MY_UART, data, Frame_DataLenghtPerFrame + 5, 3000);
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3305      	adds	r3, #5
 8000742:	b29a      	uxth	r2, r3
 8000744:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <Frame_ReadDataFrame+0xc0>)
 800074c:	f001 ff51 	bl	80025f2 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(data[Frame_DataLenghtPerFrame + 5 - 1] == EOF_SIGNAL))) return HANDLE_FAILED;
 8000750:	7b3b      	ldrb	r3, [r7, #12]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d107      	bne.n	8000766 <Frame_ReadDataFrame+0x56>
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d001      	beq.n	800076a <Frame_ReadDataFrame+0x5a>
 8000766:	2301      	movs	r3, #1
 8000768:	e02e      	b.n	80007c8 <Frame_ReadDataFrame+0xb8>

	if(buf[1] != DATA_TYPE) return HANDLE_FAILED;
 800076a:	7b7b      	ldrb	r3, [r7, #13]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d001      	beq.n	8000774 <Frame_ReadDataFrame+0x64>
 8000770:	2301      	movs	r3, #1
 8000772:	e029      	b.n	80007c8 <Frame_ReadDataFrame+0xb8>

	crc_merge.DataArray[0] = data[Frame_DataLenghtPerFrame + 5 - 2];
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	3303      	adds	r3, #3
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	743b      	strb	r3, [r7, #16]
	crc_merge.DataArray[1] = data[Frame_DataLenghtPerFrame + 5 - 3];
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	3302      	adds	r3, #2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	747b      	strb	r3, [r7, #17]
	crc_merge.DataArray[2] = data[Frame_DataLenghtPerFrame + 5 - 4];
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	74bb      	strb	r3, [r7, #18]
	crc_merge.DataArray[3] = data[Frame_DataLenghtPerFrame + 5 - 5];
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	74fb      	strb	r3, [r7, #19]

	uint32_t crc_data = crc32((uint8_t*)(&data[0]), Frame_DataLenghtPerFrame);
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <Frame_ReadDataFrame+0xc4>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fe8c 	bl	80004d0 <crc32>
 80007b8:	6178      	str	r0, [r7, #20]

	if(crc_data != crc_merge.DataUint32) return HANDLE_FAILED;
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d001      	beq.n	80007c6 <Frame_ReadDataFrame+0xb6>
 80007c2:	2301      	movs	r3, #1
 80007c4:	e000      	b.n	80007c8 <Frame_ReadDataFrame+0xb8>

	return HANDLE_OK;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000b8 	.word	0x200000b8
 80007d4:	2000002a 	.word	0x2000002a

080007d8 <Frame_STM32OTA>:

extern uint8_t bufff[19];
defReturnType Frame_STM32OTA(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80007de:	af00      	add	r7, sp, #0
	if(Frame_InitFlash(FLASH_SLOT_0) != HANDLE_OK) return HANDLE_FAILED;
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 f853 	bl	800088c <Frame_InitFlash>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <Frame_STM32OTA+0x18>
 80007ec:	2301      	movs	r3, #1
 80007ee:	e046      	b.n	800087e <Frame_STM32OTA+0xa6>

	Frame_SendResponseFrame(RESPONSE_ACK);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff feaf 	bl	8000554 <Frame_SendResponseFrame>

	if(Frame_ReadStartFrame() == HANDLE_OK){
 80007f6:	f7ff ff07 	bl	8000608 <Frame_ReadStartFrame>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d108      	bne.n	8000812 <Frame_STM32OTA+0x3a>
		Frame_SendResponseFrame(RESPONSE_ACK);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff fea7 	bl	8000554 <Frame_SendResponseFrame>
		Frame_SendResponseFrame(RESPONSE_NACK);
		Frame_ReadStopFrame();
		return HANDLE_FAILED;
	}

	if(Frame_ReadHeaderFrame() == HANDLE_OK){
 8000806:	f7ff ff43 	bl	8000690 <Frame_ReadHeaderFrame>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10e      	bne.n	800082e <Frame_STM32OTA+0x56>
 8000810:	e006      	b.n	8000820 <Frame_STM32OTA+0x48>
		Frame_SendResponseFrame(RESPONSE_NACK);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff fe9e 	bl	8000554 <Frame_SendResponseFrame>
		Frame_ReadStopFrame();
 8000818:	f7ff ff20 	bl	800065c <Frame_ReadStopFrame>
		return HANDLE_FAILED;
 800081c:	2301      	movs	r3, #1
 800081e:	e02e      	b.n	800087e <Frame_STM32OTA+0xa6>
		Frame_SendResponseFrame(RESPONSE_ACK);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fe97 	bl	8000554 <Frame_SendResponseFrame>
		Frame_SendResponseFrame(RESPONSE_NACK);
		Frame_ReadStopFrame();
		return HANDLE_FAILED;
	}

	for(uint16_t NoFrame = 0; NoFrame < Frame_NumberOfKbyteData; NoFrame ++){
 8000826:	2300      	movs	r3, #0
 8000828:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 800082c:	e01d      	b.n	800086a <Frame_STM32OTA+0x92>
		Frame_SendResponseFrame(RESPONSE_NACK);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fe90 	bl	8000554 <Frame_SendResponseFrame>
		Frame_ReadStopFrame();
 8000834:	f7ff ff12 	bl	800065c <Frame_ReadStopFrame>
		return HANDLE_FAILED;
 8000838:	2301      	movs	r3, #1
 800083a:	e020      	b.n	800087e <Frame_STM32OTA+0xa6>
		uint8_t buf[DATA_FRAME_LENGHT];
		if(Frame_ReadDataFrame(buf) == HANDLE_OK){
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff66 	bl	8000710 <Frame_ReadDataFrame>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d108      	bne.n	800085c <Frame_STM32OTA+0x84>
//			Frame_WriteFlashToSlot(FLASH_SLOT_0,(uint8_t*) (&buf[0]+4), DATA_FRAME_LENGHTs);
			Frame_SendResponseFrame(RESPONSE_ACK);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fe82 	bl	8000554 <Frame_SendResponseFrame>
	for(uint16_t NoFrame = 0; NoFrame < Frame_NumberOfKbyteData; NoFrame ++){
 8000850:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8000854:	3301      	adds	r3, #1
 8000856:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 800085a:	e006      	b.n	800086a <Frame_STM32OTA+0x92>
		}
		else{
			Frame_SendResponseFrame(RESPONSE_NACK);
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fe79 	bl	8000554 <Frame_SendResponseFrame>
			Frame_ReadStopFrame();
 8000862:	f7ff fefb 	bl	800065c <Frame_ReadStopFrame>
			return HANDLE_FAILED;
 8000866:	2301      	movs	r3, #1
 8000868:	e009      	b.n	800087e <Frame_STM32OTA+0xa6>
	for(uint16_t NoFrame = 0; NoFrame < Frame_NumberOfKbyteData; NoFrame ++){
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <Frame_STM32OTA+0xb0>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000874:	429a      	cmp	r2, r3
 8000876:	d3e1      	bcc.n	800083c <Frame_STM32OTA+0x64>
		}
	}


	HAL_FLASH_Lock();
 8000878:	f000 fdf2 	bl	8001460 <HAL_FLASH_Lock>
	return HANDLE_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000028 	.word	0x20000028

0800088c <Frame_InitFlash>:


defReturnType Frame_InitFlash(uint8_t slot){
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 8000896:	f000 fdc1 	bl	800141c <HAL_FLASH_Unlock>
 800089a:	4603      	mov	r3, r0
 800089c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != (uint8_t)HAL_OK){
 80008a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <Frame_InitFlash+0x20>
		return HANDLE_FAILED;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e028      	b.n	80008fe <Frame_InitFlash+0x72>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]

	if(slot == 0x00){
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <Frame_InitFlash+0x30>
		EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80008b6:	2305      	movs	r3, #5
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	e00a      	b.n	80008d2 <Frame_InitFlash+0x46>
	}
	else if(slot == 0x01){
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d102      	bne.n	80008c8 <Frame_InitFlash+0x3c>
		EraseInitStruct.Sector        = FLASH_SECTOR_6;
 80008c2:	2306      	movs	r3, #6
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	e004      	b.n	80008d2 <Frame_InitFlash+0x46>
	}
	else if(slot == 0x02){
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d101      	bne.n	80008d2 <Frame_InitFlash+0x46>
		EraseInitStruct.Sector        = FLASH_SECTOR_7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	61bb      	str	r3, [r7, #24]
	}
	EraseInitStruct.NbSectors     = 1;           //erase 2 sectors
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80008da:	f107 020c 	add.w	r2, r7, #12
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fe71 	bl	80015cc <HAL_FLASHEx_Erase>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if( ret != (uint8_t)HAL_OK )
 80008f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <Frame_InitFlash+0x70>
	{
		return HANDLE_FAILED;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e000      	b.n	80008fe <Frame_InitFlash+0x72>
	}

	return HANDLE_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_UART_RxCpltCallback>:
static uint8_t status = 0;
uint8_t rx_header[15] = {0,};

uint32_t crc = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_UART_RxCpltCallback+0x58>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d11c      	bne.n	8000956 <HAL_UART_RxCpltCallback+0x4e>
			if(!strncmp("OTA",(char*)rx_buf, 3)){
 800091c:	2203      	movs	r2, #3
 800091e:	4911      	ldr	r1, [pc, #68]	; (8000964 <HAL_UART_RxCpltCallback+0x5c>)
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <HAL_UART_RxCpltCallback+0x60>)
 8000922:	f002 fe1d 	bl	8003560 <strncmp>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10a      	bne.n	8000942 <HAL_UART_RxCpltCallback+0x3a>
				HAL_UART_Transmit(&huart2, rx_buf, 3, 1000);
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	2203      	movs	r2, #3
 8000932:	490c      	ldr	r1, [pc, #48]	; (8000964 <HAL_UART_RxCpltCallback+0x5c>)
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <HAL_UART_RxCpltCallback+0x64>)
 8000936:	f001 fdca 	bl	80024ce <HAL_UART_Transmit>
				flag = 1;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_UART_RxCpltCallback+0x68>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e004      	b.n	800094c <HAL_UART_RxCpltCallback+0x44>
			}
			else{
				HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 8000942:	2203      	movs	r2, #3
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <HAL_UART_RxCpltCallback+0x5c>)
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <HAL_UART_RxCpltCallback+0x58>)
 8000948:	f001 fef5 	bl	8002736 <HAL_UART_Receive_IT>
			}
			memset(rx_buf, 0, 3);
 800094c:	2203      	movs	r2, #3
 800094e:	2100      	movs	r1, #0
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_UART_RxCpltCallback+0x5c>)
 8000952:	f002 fdfd 	bl	8003550 <memset>
//		HAL_UART_Transmit(&huart2, rx_header, 19, 1000);
//		HAL_UART_Receive_IT(&huart6, rx_header, 19);
//		memset(rx_header, 0, 10);
	}
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000b8 	.word	0x200000b8
 8000964:	2000002c 	.word	0x2000002c
 8000968:	0800359c 	.word	0x0800359c
 800096c:	20000100 	.word	0x20000100
 8000970:	2000002f 	.word	0x2000002f

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fb1e 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f824 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 f91c 	bl	8000bbc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000984:	f000 f89c 	bl	8000ac0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000988:	f000 f8c4 	bl	8000b14 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800098c:	f000 f884 	bl	8000a98 <MX_CRC_Init>
  MX_USART6_UART_Init();
 8000990:	f000 f8ea 	bl	8000b68 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 8000994:	2203      	movs	r2, #3
 8000996:	4909      	ldr	r1, [pc, #36]	; (80009bc <main+0x48>)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <main+0x4c>)
 800099a:	f001 fecc 	bl	8002736 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag == 1){
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <main+0x50>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d1fb      	bne.n	800099e <main+0x2a>
		  Frame_STM32OTA();
 80009a6:	f7ff ff17 	bl	80007d8 <Frame_STM32OTA>
//		  Frame_SendResponseFrame(RESPONSE_ACK);
//		  HAL_UART_Receive(&huart6, bufff, DATA_FRAME_LENGHT, 1000);
//		  Frame_ReadDataFrame(bufff);

		  flag = 0;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <main+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 80009b0:	2203      	movs	r2, #3
 80009b2:	4902      	ldr	r1, [pc, #8]	; (80009bc <main+0x48>)
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <main+0x4c>)
 80009b6:	f001 febe 	bl	8002736 <HAL_UART_Receive_IT>
	  if(flag == 1){
 80009ba:	e7f0      	b.n	800099e <main+0x2a>
 80009bc:	2000002c 	.word	0x2000002c
 80009c0:	200000b8 	.word	0x200000b8
 80009c4:	2000002f 	.word	0x2000002f

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fdba 	bl	8003550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <SystemClock_Config+0xc8>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <SystemClock_Config+0xc8>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <SystemClock_Config+0xc8>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <SystemClock_Config+0xcc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <SystemClock_Config+0xcc>)
 8000a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <SystemClock_Config+0xcc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 f87d 	bl	8001b4c <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a58:	f000 f910 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2103      	movs	r1, #3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fadf 	bl	800203c <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a84:	f000 f8fa 	bl	8000c7c <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3750      	adds	r7, #80	; 0x50
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_CRC_Init+0x20>)
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <MX_CRC_Init+0x24>)
 8000aa0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_CRC_Init+0x20>)
 8000aa4:	f000 fc0b 	bl	80012be <HAL_CRC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000aae:	f000 f8e5 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000050 	.word	0x20000050
 8000abc:	40023000 	.word	0x40023000

08000ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000af8:	f001 fc9c 	bl	8002434 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f8bb 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000068 	.word	0x20000068
 8000b10:	40011000 	.word	0x40011000

08000b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <MX_USART2_UART_Init+0x50>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	f001 fc72 	bl	8002434 <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b56:	f000 f891 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000100 	.word	0x20000100
 8000b64:	40004400 	.word	0x40004400

08000b68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <MX_USART6_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USART6_UART_Init+0x4c>)
 8000ba0:	f001 fc48 	bl	8002434 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f867 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b8 	.word	0x200000b8
 8000bb8:	40011400 	.word	0x40011400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a26      	ldr	r2, [pc, #152]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_GPIO_Init+0xb8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_GPIO_Init+0xbc>)
 8000c4a:	f000 ff65 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD9 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8000c4e:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_GPIO_Init+0xbc>)
 8000c68:	f000 fdd2 	bl	8001810 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_CRC_MspInit+0x3c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d10d      	bne.n	8000d06 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_CRC_MspInit+0x40>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_CRC_MspInit+0x40>)
 8000cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_CRC_MspInit+0x40>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023000 	.word	0x40023000
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a57      	ldr	r2, [pc, #348]	; (8000e98 <HAL_UART_MspInit+0x17c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d135      	bne.n	8000daa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
 8000d42:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a55      	ldr	r2, [pc, #340]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b53      	ldr	r3, [pc, #332]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	4b4f      	ldr	r3, [pc, #316]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4843      	ldr	r0, [pc, #268]	; (8000ea0 <HAL_UART_MspInit+0x184>)
 8000d94:	f000 fd3c 	bl	8001810 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2025      	movs	r0, #37	; 0x25
 8000d9e:	f000 fa58 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000da2:	2025      	movs	r0, #37	; 0x25
 8000da4:	f000 fa71 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000da8:	e072      	b.n	8000e90 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a3d      	ldr	r2, [pc, #244]	; (8000ea4 <HAL_UART_MspInit+0x188>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d134      	bne.n	8000e1e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dec:	230c      	movs	r3, #12
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <HAL_UART_MspInit+0x184>)
 8000e08:	f000 fd02 	bl	8001810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2026      	movs	r0, #38	; 0x26
 8000e12:	f000 fa1e 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e16:	2026      	movs	r0, #38	; 0x26
 8000e18:	f000 fa37 	bl	800128a <HAL_NVIC_EnableIRQ>
}
 8000e1c:	e038      	b.n	8000e90 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <HAL_UART_MspInit+0x18c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d133      	bne.n	8000e90 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e30:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	6453      	str	r3, [r2, #68]	; 0x44
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	f003 0320 	and.w	r3, r3, #32
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0x180>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e60:	23c0      	movs	r3, #192	; 0xc0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e70:	2308      	movs	r3, #8
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <HAL_UART_MspInit+0x190>)
 8000e7c:	f000 fcc8 	bl	8001810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2047      	movs	r0, #71	; 0x47
 8000e86:	f000 f9e4 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e8a:	2047      	movs	r0, #71	; 0x47
 8000e8c:	f000 f9fd 	bl	800128a <HAL_NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3738      	adds	r7, #56	; 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40011400 	.word	0x40011400
 8000eac:	40020800 	.word	0x40020800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f8ae 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <USART1_IRQHandler+0x10>)
 8000f0a:	f001 fc45 	bl	8002798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000068 	.word	0x20000068

08000f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <USART2_IRQHandler+0x10>)
 8000f1e:	f001 fc3b 	bl	8002798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000100 	.word	0x20000100

08000f2c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USART6_IRQHandler+0x10>)
 8000f32:	f001 fc31 	bl	8002798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000b8 	.word	0x200000b8

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd7 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f002 fab9 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fced 	bl	8000974 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fa8:	080039e4 	.word	0x080039e4
  ldr r2, =_sbss
 8000fac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb0:	2000016c 	.word	0x2000016c

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f92b 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fe4c 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f943 	bl	80012a6 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f90b 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	20000148 	.word	0x20000148

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000148 	.word	0x20000148

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff3e 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff31 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e00e      	b.n	80012ee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	795b      	ldrb	r3, [r3, #5]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fcf9 	bl	8000cd8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff febe 	bl	8001084 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d008      	beq.n	8001328 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e052      	b.n	80013ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0216 	bic.w	r2, r2, #22
 8001336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001346:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <HAL_DMA_Abort+0x62>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0208 	bic.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001378:	e013      	b.n	80013a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800137a:	f7ff fe83 	bl	8001084 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b05      	cmp	r3, #5
 8001386:	d90c      	bls.n	80013a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2220      	movs	r2, #32
 800138c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e015      	b.n	80013ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e4      	bne.n	800137a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	223f      	movs	r2, #63	; 0x3f
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d004      	beq.n	80013f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e00c      	b.n	800140e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2205      	movs	r2, #5
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_FLASH_Unlock+0x38>)
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da0b      	bge.n	8001446 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_FLASH_Unlock+0x38>)
 8001430:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_FLASH_Unlock+0x3c>)
 8001432:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_FLASH_Unlock+0x38>)
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_FLASH_Unlock+0x40>)
 8001438:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_FLASH_Unlock+0x38>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da01      	bge.n	8001446 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001446:	79fb      	ldrb	r3, [r7, #7]
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40023c00 	.word	0x40023c00
 8001458:	45670123 	.word	0x45670123
 800145c:	cdef89ab 	.word	0xcdef89ab

08001460 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_FLASH_Lock+0x1c>)
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_FLASH_Lock+0x1c>)
 800146a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800146e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40023c00 	.word	0x40023c00

08001480 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <FLASH_WaitForLastOperation+0x78>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff fdf7 	bl	8001084 <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001498:	e010      	b.n	80014bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d00c      	beq.n	80014bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <FLASH_WaitForLastOperation+0x38>
 80014a8:	f7ff fdec 	bl	8001084 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d201      	bcs.n	80014bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e019      	b.n	80014f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <FLASH_WaitForLastOperation+0x7c>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e8      	bne.n	800149a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <FLASH_WaitForLastOperation+0x7c>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <FLASH_WaitForLastOperation+0x7c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <FLASH_WaitForLastOperation+0x7c>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014e6:	f000 f80b 	bl	8001500 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
  
}  
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000014c 	.word	0x2000014c
 80014fc:	40023c00 	.word	0x40023c00

08001500 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 800151a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 800151e:	2210      	movs	r2, #16
 8001520:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 8001538:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 800153c:	2220      	movs	r2, #32
 800153e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 8001556:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 8001574:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 8001592:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 8001596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f043 0320 	orr.w	r3, r3, #32
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <FLASH_SetErrorCode+0xc8>)
 80015b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <FLASH_SetErrorCode+0xc4>)
 80015b6:	2202      	movs	r2, #2
 80015b8:	60da      	str	r2, [r3, #12]
  }
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40023c00 	.word	0x40023c00
 80015c8:	2000014c 	.word	0x2000014c

080015cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_FLASHEx_Erase+0xd8>)
 80015e0:	7e1b      	ldrb	r3, [r3, #24]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_FLASHEx_Erase+0x1e>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e058      	b.n	800169c <HAL_FLASHEx_Erase+0xd0>
 80015ea:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <HAL_FLASHEx_Erase+0xd8>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015f4:	f7ff ff44 	bl	8001480 <FLASH_WaitForLastOperation>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d148      	bne.n	8001694 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d115      	bne.n	800163e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f000 f844 	bl	80016ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001624:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001628:	f7ff ff2a 	bl	8001480 <FLASH_WaitForLastOperation>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_FLASHEx_Erase+0xdc>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_FLASHEx_Erase+0xdc>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6113      	str	r3, [r2, #16]
 800163c:	e028      	b.n	8001690 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	e01c      	b.n	8001680 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	68b8      	ldr	r0, [r7, #8]
 8001650:	f000 f850 	bl	80016f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001654:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001658:	f7ff ff12 	bl	8001480 <FLASH_WaitForLastOperation>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_FLASHEx_Erase+0xdc>)
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_FLASHEx_Erase+0xdc>)
 8001666:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800166a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	601a      	str	r2, [r3, #0]
          break;
 8001678:	e00a      	b.n	8001690 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4413      	add	r3, r2
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	d3da      	bcc.n	8001646 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001690:	f000 f878 	bl	8001784 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_FLASHEx_Erase+0xd8>)
 8001696:	2200      	movs	r2, #0
 8001698:	761a      	strb	r2, [r3, #24]

  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000014c 	.word	0x2000014c
 80016a8:	40023c00 	.word	0x40023c00

080016ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <FLASH_MassErase+0x44>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <FLASH_MassErase+0x44>)
 80016be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <FLASH_MassErase+0x44>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <FLASH_MassErase+0x44>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <FLASH_MassErase+0x44>)
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	4313      	orrs	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <FLASH_MassErase+0x44>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6113      	str	r3, [r2, #16]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e010      	b.n	8001732 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d103      	bne.n	800171e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e009      	b.n	8001732 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d103      	bne.n	800172c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	e002      	b.n	8001732 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800172c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001730:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 8001738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800173c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	490f      	ldr	r1, [pc, #60]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 8001750:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001754:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4313      	orrs	r3, r2
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <FLASH_Erase_Sector+0x8c>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	6113      	str	r3, [r2, #16]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40023c00 	.word	0x40023c00

08001784 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <FLASH_FlushCaches+0x88>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001790:	2b00      	cmp	r3, #0
 8001792:	d017      	beq.n	80017c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <FLASH_FlushCaches+0x88>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <FLASH_FlushCaches+0x88>)
 800179a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800179e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <FLASH_FlushCaches+0x88>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <FLASH_FlushCaches+0x88>)
 80017a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <FLASH_FlushCaches+0x88>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a16      	ldr	r2, [pc, #88]	; (800180c <FLASH_FlushCaches+0x88>)
 80017b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <FLASH_FlushCaches+0x88>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a13      	ldr	r2, [pc, #76]	; (800180c <FLASH_FlushCaches+0x88>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <FLASH_FlushCaches+0x88>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d017      	beq.n	8001800 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <FLASH_FlushCaches+0x88>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <FLASH_FlushCaches+0x88>)
 80017d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <FLASH_FlushCaches+0x88>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <FLASH_FlushCaches+0x88>)
 80017e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <FLASH_FlushCaches+0x88>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <FLASH_FlushCaches+0x88>)
 80017ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <FLASH_FlushCaches+0x88>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <FLASH_FlushCaches+0x88>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fe:	6013      	str	r3, [r2, #0]
  }
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	e159      	b.n	8001ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800182c:	2201      	movs	r2, #1
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	429a      	cmp	r2, r3
 8001846:	f040 8148 	bne.w	8001ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d005      	beq.n	8001862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	2b02      	cmp	r3, #2
 8001860:	d130      	bne.n	80018c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d017      	beq.n	8001900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d123      	bne.n	8001954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	69b9      	ldr	r1, [r7, #24]
 8001950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a2 	beq.w	8001ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a56      	ldr	r2, [pc, #344]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b2:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x2ec>)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <HAL_GPIO_Init+0x2f0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x202>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a48      	ldr	r2, [pc, #288]	; (8001b04 <HAL_GPIO_Init+0x2f4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x1fe>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a47      	ldr	r2, [pc, #284]	; (8001b08 <HAL_GPIO_Init+0x2f8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x1fa>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a46      	ldr	r2, [pc, #280]	; (8001b0c <HAL_GPIO_Init+0x2fc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x1f6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a45      	ldr	r2, [pc, #276]	; (8001b10 <HAL_GPIO_Init+0x300>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x1f2>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e008      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e004      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a12:	2300      	movs	r3, #0
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f002 0203 	and.w	r2, r2, #3
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a24:	4935      	ldr	r1, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x2ec>)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a56:	4a2f      	ldr	r2, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a80:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	f67f aea2 	bls.w	800182c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020400 	.word	0x40020400
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020c00 	.word	0x40020c00
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40013c00 	.word	0x40013c00

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e264      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d075      	beq.n	8001c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6a:	4ba3      	ldr	r3, [pc, #652]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d00c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b76:	4ba0      	ldr	r3, [pc, #640]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b9d      	ldr	r3, [pc, #628]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	4b99      	ldr	r3, [pc, #612]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d05b      	beq.n	8001c54 <HAL_RCC_OscConfig+0x108>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d157      	bne.n	8001c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e23f      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x74>
 8001bb2:	4b91      	ldr	r3, [pc, #580]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a90      	ldr	r2, [pc, #576]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e01d      	b.n	8001bfc <HAL_RCC_OscConfig+0xb0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x98>
 8001bca:	4b8b      	ldr	r3, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a8a      	ldr	r2, [pc, #552]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a87      	ldr	r2, [pc, #540]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0xb0>
 8001be4:	4b84      	ldr	r3, [pc, #528]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a83      	ldr	r2, [pc, #524]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a80      	ldr	r2, [pc, #512]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fa3e 	bl	8001084 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fa3a 	bl	8001084 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e204      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b76      	ldr	r3, [pc, #472]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0xc0>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fa2a 	bl	8001084 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fa26 	bl	8001084 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1f0      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	4b6c      	ldr	r3, [pc, #432]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0xe8>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d063      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c62:	4b65      	ldr	r3, [pc, #404]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	4b62      	ldr	r3, [pc, #392]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d11c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_RCC_OscConfig+0x152>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e1c4      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4952      	ldr	r1, [pc, #328]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	e03a      	b.n	8001d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCC_OscConfig+0x2b0>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f9df 	bl	8001084 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff f9db 	bl	8001084 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1a5      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4940      	ldr	r1, [pc, #256]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_RCC_OscConfig+0x2b0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff f9be 	bl	8001084 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff f9ba 	bl	8001084 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e184      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d030      	beq.n	8001d98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x2b4>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff f99e 	bl	8001084 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f99a 	bl	8001084 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e164      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x200>
 8001d6a:	e015      	b.n	8001d98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6c:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_OscConfig+0x2b4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff f987 	bl	8001084 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7ff f983 	bl	8001084 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e14d      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a0 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x2b8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d121      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_RCC_OscConfig+0x2b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_RCC_OscConfig+0x2b8>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f949 	bl	8001084 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	e011      	b.n	8001e1a <HAL_RCC_OscConfig+0x2ce>
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	42470000 	.word	0x42470000
 8001e00:	42470e80 	.word	0x42470e80
 8001e04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7ff f93c 	bl	8001084 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e106      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x4e4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2f0>
 8001e2e:	4b81      	ldr	r3, [pc, #516]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a80      	ldr	r2, [pc, #512]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x32a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x312>
 8001e44:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e50:	4b78      	ldr	r3, [pc, #480]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a77      	ldr	r2, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x32a>
 8001e5e:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	4a74      	ldr	r2, [pc, #464]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6a:	4b72      	ldr	r3, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a71      	ldr	r2, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f901 	bl	8001084 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff f8fd 	bl	8001084 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0c5      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b65      	ldr	r3, [pc, #404]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x33a>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f8eb 	bl	8001084 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff f8e7 	bl	8001084 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0af      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b5a      	ldr	r3, [pc, #360]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b56      	ldr	r3, [pc, #344]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a55      	ldr	r2, [pc, #340]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 809b 	beq.w	8002026 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d05c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d141      	bne.n	8001f88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCC_OscConfig+0x4ec>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff f8bb 	bl	8001084 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff f8b7 	bl	8001084 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e081      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69da      	ldr	r2, [r3, #28]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	019b      	lsls	r3, r3, #6
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	061b      	lsls	r3, r3, #24
 8001f54:	4937      	ldr	r1, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCC_OscConfig+0x4ec>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f890 	bl	8001084 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff f88c 	bl	8001084 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e056      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x41c>
 8001f86:	e04e      	b.n	8002026 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x4ec>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f879 	bl	8001084 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff f875 	bl	8001084 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e03f      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x44a>
 8001fb4:	e037      	b.n	8002026 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e032      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_RCC_OscConfig+0x4e8>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d028      	beq.n	8002022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d121      	bne.n	8002022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d11a      	bne.n	8002022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ff8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d111      	bne.n	8002022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	3b01      	subs	r3, #1
 800200c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d107      	bne.n	8002022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40007000 	.word	0x40007000
 8002034:	40023800 	.word	0x40023800
 8002038:	42470060 	.word	0x42470060

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0cc      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d90c      	bls.n	8002078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d044      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d119      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e067      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4934      	ldr	r1, [pc, #208]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7fe ffaa 	bl	8001084 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7fe ffa6 	bl	8001084 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e04f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d20c      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 f821 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	490a      	ldr	r1, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe ff0a 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00
 80021f8:	40023800 	.word	0x40023800
 80021fc:	080039bc 	.word	0x080039bc
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	2300      	movs	r3, #0
 800221a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002220:	4b67      	ldr	r3, [pc, #412]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d00d      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x40>
 800222c:	2b08      	cmp	r3, #8
 800222e:	f200 80bd 	bhi.w	80023ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x34>
 8002236:	2b04      	cmp	r3, #4
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x3a>
 800223a:	e0b7      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800223e:	60bb      	str	r3, [r7, #8]
       break;
 8002240:	e0b7      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002242:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002244:	60bb      	str	r3, [r7, #8]
      break;
 8002246:	e0b4      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002248:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002250:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002252:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d04d      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225e:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	461a      	mov	r2, r3
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	ea02 0800 	and.w	r8, r2, r0
 8002276:	ea03 0901 	and.w	r9, r3, r1
 800227a:	4640      	mov	r0, r8
 800227c:	4649      	mov	r1, r9
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	014b      	lsls	r3, r1, #5
 8002288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800228c:	0142      	lsls	r2, r0, #5
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	ebb0 0008 	subs.w	r0, r0, r8
 8002296:	eb61 0109 	sbc.w	r1, r1, r9
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	018b      	lsls	r3, r1, #6
 80022a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022a8:	0182      	lsls	r2, r0, #6
 80022aa:	1a12      	subs	r2, r2, r0
 80022ac:	eb63 0301 	sbc.w	r3, r3, r1
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	00d9      	lsls	r1, r3, #3
 80022ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022be:	00d0      	lsls	r0, r2, #3
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	eb12 0208 	adds.w	r2, r2, r8
 80022c8:	eb43 0309 	adc.w	r3, r3, r9
 80022cc:	f04f 0000 	mov.w	r0, #0
 80022d0:	f04f 0100 	mov.w	r1, #0
 80022d4:	0259      	lsls	r1, r3, #9
 80022d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022da:	0250      	lsls	r0, r2, #9
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	f7fd ff74 	bl	80001d8 <__aeabi_uldivmod>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4613      	mov	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e04a      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	461a      	mov	r2, r3
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	ea02 0400 	and.w	r4, r2, r0
 8002312:	ea03 0501 	and.w	r5, r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	014b      	lsls	r3, r1, #5
 8002324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002328:	0142      	lsls	r2, r0, #5
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	1b00      	subs	r0, r0, r4
 8002330:	eb61 0105 	sbc.w	r1, r1, r5
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	018b      	lsls	r3, r1, #6
 800233e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002342:	0182      	lsls	r2, r0, #6
 8002344:	1a12      	subs	r2, r2, r0
 8002346:	eb63 0301 	sbc.w	r3, r3, r1
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	00d9      	lsls	r1, r3, #3
 8002354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002358:	00d0      	lsls	r0, r2, #3
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	1912      	adds	r2, r2, r4
 8002360:	eb45 0303 	adc.w	r3, r5, r3
 8002364:	f04f 0000 	mov.w	r0, #0
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	0299      	lsls	r1, r3, #10
 800236e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002372:	0290      	lsls	r0, r2, #10
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	f7fd ff28 	bl	80001d8 <__aeabi_uldivmod>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4613      	mov	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	3301      	adds	r3, #1
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	60bb      	str	r3, [r7, #8]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023ae:	60bb      	str	r3, [r7, #8]
      break;
 80023b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b2:	68bb      	ldr	r3, [r7, #8]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	00f42400 	.word	0x00f42400
 80023c8:	007a1200 	.word	0x007a1200

080023cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000000 	.word	0x20000000

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e8:	f7ff fff0 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	0a9b      	lsrs	r3, r3, #10
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	080039cc 	.word	0x080039cc

0800240c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002410:	f7ff ffdc 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0b5b      	lsrs	r3, r3, #13
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	080039cc 	.word	0x080039cc

08002434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e03f      	b.n	80024c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fc5e 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2224      	movs	r2, #36	; 0x24
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fe7d 	bl	8003178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800248c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800249c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b08a      	sub	sp, #40	; 0x28
 80024d2:	af02      	add	r7, sp, #8
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d17c      	bne.n	80025e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_UART_Transmit+0x2c>
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e075      	b.n	80025ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_UART_Transmit+0x3e>
 8002508:	2302      	movs	r3, #2
 800250a:	e06e      	b.n	80025ea <HAL_UART_Transmit+0x11c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2221      	movs	r2, #33	; 0x21
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002522:	f7fe fdaf 	bl	8001084 <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253c:	d108      	bne.n	8002550 <HAL_UART_Transmit+0x82>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d104      	bne.n	8002550 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e003      	b.n	8002558 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002560:	e02a      	b.n	80025b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fbc1 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e036      	b.n	80025ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	3302      	adds	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e007      	b.n	80025aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1cf      	bne.n	8002562 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fb91 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e006      	b.n	80025ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b08a      	sub	sp, #40	; 0x28
 80025f6:	af02      	add	r7, sp, #8
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	f040 808c 	bne.w	800272c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_UART_Receive+0x2e>
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e084      	b.n	800272e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_UART_Receive+0x40>
 800262e:	2302      	movs	r3, #2
 8002630:	e07d      	b.n	800272e <HAL_UART_Receive+0x13c>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2222      	movs	r2, #34	; 0x22
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800264e:	f7fe fd19 	bl	8001084 <HAL_GetTick>
 8002652:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002668:	d108      	bne.n	800267c <HAL_UART_Receive+0x8a>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e003      	b.n	8002684 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800268c:	e043      	b.n	8002716 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2120      	movs	r1, #32
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fb2b 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e042      	b.n	800272e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	3302      	adds	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	e01f      	b.n	8002708 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d007      	beq.n	80026e2 <HAL_UART_Receive+0xf0>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_UART_Receive+0xfe>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e008      	b.n	8002702 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3301      	adds	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1b6      	bne.n	800268e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	d11d      	bne.n	800278c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_Receive_IT+0x26>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e016      	b.n	800278e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_UART_Receive_IT+0x38>
 800276a:	2302      	movs	r3, #2
 800276c:	e00f      	b.n	800278e <HAL_UART_Receive_IT+0x58>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	461a      	mov	r2, r3
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fb24 	bl	8002dd0 <UART_Start_Receive_IT>
 8002788:	4603      	mov	r3, r0
 800278a:	e000      	b.n	800278e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0ba      	sub	sp, #232	; 0xe8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_UART_IRQHandler+0x66>
 80027ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fc03 	bl	8003002 <UART_Receive_IT>
      return;
 80027fc:	e256      	b.n	8002cac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80de 	beq.w	80029c4 <HAL_UART_IRQHandler+0x22c>
 8002808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80d1 	beq.w	80029c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_UART_IRQHandler+0xae>
 800282e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_UART_IRQHandler+0xd2>
 8002852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800286a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
 8002876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0204 	orr.w	r2, r3, #4
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d011      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
 800289a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0208 	orr.w	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 81ed 	beq.w	8002ca2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_UART_IRQHandler+0x14e>
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fb8e 	bl	8003002 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_UART_IRQHandler+0x17a>
 800290a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04f      	beq.n	80029b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa96 	bl	8002e44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d141      	bne.n	80029aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800293c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3314      	adds	r3, #20
 800294e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800295e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800296a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1d9      	bne.n	8002926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	2b00      	cmp	r3, #0
 8002978:	d013      	beq.n	80029a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	4a7d      	ldr	r2, [pc, #500]	; (8002b74 <HAL_UART_IRQHandler+0x3dc>)
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fd25 	bl	80013d6 <HAL_DMA_Abort_IT>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800299c:	4610      	mov	r0, r2
 800299e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	e00e      	b.n	80029c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f990 	bl	8002cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	e00a      	b.n	80029c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f98c 	bl	8002cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	e006      	b.n	80029c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f988 	bl	8002cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029be:	e170      	b.n	8002ca2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	bf00      	nop
    return;
 80029c2:	e16e      	b.n	8002ca2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	f040 814a 	bne.w	8002c62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8143 	beq.w	8002c62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 813c 	beq.w	8002c62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	f040 80b4 	bne.w	8002b78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8140 	beq.w	8002ca6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	f080 8139 	bcs.w	8002ca6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a46:	f000 8088 	beq.w	8002b5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1d9      	bne.n	8002a4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3314      	adds	r3, #20
 8002a9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002abe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e1      	bne.n	8002a96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3314      	adds	r3, #20
 8002af2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002af6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002af8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002afc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e3      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	f023 0310 	bic.w	r3, r3, #16
 8002b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e3      	bne.n	8002b18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fbce 	bl	80012f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8b6 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b70:	e099      	b.n	8002ca6 <HAL_UART_IRQHandler+0x50e>
 8002b72:	bf00      	nop
 8002b74:	08002f0b 	.word	0x08002f0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 808b 	beq.w	8002caa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8086 	beq.w	8002caa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8002bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e3      	bne.n	8002b9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	623b      	str	r3, [r7, #32]
   return(result);
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3314      	adds	r3, #20
 8002bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e3      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0310 	bic.w	r3, r3, #16
 8002c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c40:	61fa      	str	r2, [r7, #28]
 8002c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e3      	bne.n	8002c1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f83e 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c60:	e023      	b.n	8002caa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_UART_IRQHandler+0x4ea>
 8002c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f959 	bl	8002f32 <UART_Transmit_IT>
    return;
 8002c80:	e014      	b.n	8002cac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00e      	beq.n	8002cac <HAL_UART_IRQHandler+0x514>
 8002c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f999 	bl	8002fd2 <UART_EndTransmit_IT>
    return;
 8002ca0:	e004      	b.n	8002cac <HAL_UART_IRQHandler+0x514>
    return;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <HAL_UART_IRQHandler+0x514>
      return;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <HAL_UART_IRQHandler+0x514>
      return;
 8002caa:	bf00      	nop
  }
}
 8002cac:	37e8      	adds	r7, #232	; 0xe8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop

08002cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b090      	sub	sp, #64	; 0x40
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d04:	e050      	b.n	8002da8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d04c      	beq.n	8002da8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d14:	f7fe f9b6 	bl	8001084 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d241      	bcs.n	8002da8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d44:	637a      	str	r2, [r7, #52]	; 0x34
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e5      	bne.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	613b      	str	r3, [r7, #16]
   return(result);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d78:	623a      	str	r2, [r7, #32]
 8002d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	69f9      	ldr	r1, [r7, #28]
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e5      	bne.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e00f      	b.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d09f      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3740      	adds	r7, #64	; 0x40
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2222      	movs	r2, #34	; 0x22
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e14:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0220 	orr.w	r2, r2, #32
 8002e34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b095      	sub	sp, #84	; 0x54
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e6c:	643a      	str	r2, [r7, #64]	; 0x40
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d119      	bne.n	8002ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	e853 3f00 	ldrex	r3, [r3]
 8002eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 0310 	bic.w	r3, r3, #16
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002edc:	61ba      	str	r2, [r7, #24]
 8002ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	6979      	ldr	r1, [r7, #20]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e5      	bne.n	8002ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002efe:	bf00      	nop
 8002f00:	3754      	adds	r7, #84	; 0x54
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff fecf 	bl	8002cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b21      	cmp	r3, #33	; 0x21
 8002f44:	d13e      	bne.n	8002fc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	d114      	bne.n	8002f7a <UART_Transmit_IT+0x48>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d110      	bne.n	8002f7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	1c9a      	adds	r2, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	621a      	str	r2, [r3, #32]
 8002f78:	e008      	b.n	8002f8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	1c59      	adds	r1, r3, #1
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6211      	str	r1, [r2, #32]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10f      	bne.n	8002fc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fe5e 	bl	8002cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b08c      	sub	sp, #48	; 0x30
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b22      	cmp	r3, #34	; 0x22
 8003014:	f040 80ab 	bne.w	800316e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d117      	bne.n	8003052 <UART_Receive_IT+0x50>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d113      	bne.n	8003052 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003040:	b29a      	uxth	r2, r3
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
 8003050:	e026      	b.n	80030a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003064:	d007      	beq.n	8003076 <UART_Receive_IT+0x74>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <UART_Receive_IT+0x82>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e008      	b.n	8003096 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003090:	b2da      	uxtb	r2, r3
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4619      	mov	r1, r3
 80030ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d15a      	bne.n	800316a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0220 	bic.w	r2, r2, #32
 80030c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d135      	bne.n	8003160 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	613b      	str	r3, [r7, #16]
   return(result);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f023 0310 	bic.w	r3, r3, #16
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	330c      	adds	r3, #12
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	623a      	str	r2, [r7, #32]
 800311c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	69f9      	ldr	r1, [r7, #28]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	61bb      	str	r3, [r7, #24]
   return(result);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e5      	bne.n	80030fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d10a      	bne.n	8003152 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fdbf 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
 800315e:	e002      	b.n	8003166 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fd fbd1 	bl	8000908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e002      	b.n	8003170 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3730      	adds	r7, #48	; 0x30
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317c:	b09f      	sub	sp, #124	; 0x7c
 800317e:	af00      	add	r7, sp, #0
 8003180:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800318c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318e:	68d9      	ldr	r1, [r3, #12]
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	ea40 0301 	orr.w	r3, r0, r1
 8003198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031bc:	f021 010c 	bic.w	r1, r1, #12
 80031c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c6:	430b      	orrs	r3, r1
 80031c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d6:	6999      	ldr	r1, [r3, #24]
 80031d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	ea40 0301 	orr.w	r3, r0, r1
 80031e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4bc5      	ldr	r3, [pc, #788]	; (80034fc <UART_SetConfig+0x384>)
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d004      	beq.n	80031f6 <UART_SetConfig+0x7e>
 80031ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4bc3      	ldr	r3, [pc, #780]	; (8003500 <UART_SetConfig+0x388>)
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d103      	bne.n	80031fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031f6:	f7ff f909 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 80031fa:	6778      	str	r0, [r7, #116]	; 0x74
 80031fc:	e002      	b.n	8003204 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031fe:	f7ff f8f1 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8003202:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320c:	f040 80b6 	bne.w	800337c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003212:	461c      	mov	r4, r3
 8003214:	f04f 0500 	mov.w	r5, #0
 8003218:	4622      	mov	r2, r4
 800321a:	462b      	mov	r3, r5
 800321c:	1891      	adds	r1, r2, r2
 800321e:	6439      	str	r1, [r7, #64]	; 0x40
 8003220:	415b      	adcs	r3, r3
 8003222:	647b      	str	r3, [r7, #68]	; 0x44
 8003224:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003228:	1912      	adds	r2, r2, r4
 800322a:	eb45 0303 	adc.w	r3, r5, r3
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	00d9      	lsls	r1, r3, #3
 8003238:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800323c:	00d0      	lsls	r0, r2, #3
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	1911      	adds	r1, r2, r4
 8003244:	6639      	str	r1, [r7, #96]	; 0x60
 8003246:	416b      	adcs	r3, r5
 8003248:	667b      	str	r3, [r7, #100]	; 0x64
 800324a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	1891      	adds	r1, r2, r2
 8003256:	63b9      	str	r1, [r7, #56]	; 0x38
 8003258:	415b      	adcs	r3, r3
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800325c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003260:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003264:	f7fc ffb8 	bl	80001d8 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4ba5      	ldr	r3, [pc, #660]	; (8003504 <UART_SetConfig+0x38c>)
 800326e:	fba3 2302 	umull	r2, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	011e      	lsls	r6, r3, #4
 8003276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003278:	461c      	mov	r4, r3
 800327a:	f04f 0500 	mov.w	r5, #0
 800327e:	4622      	mov	r2, r4
 8003280:	462b      	mov	r3, r5
 8003282:	1891      	adds	r1, r2, r2
 8003284:	6339      	str	r1, [r7, #48]	; 0x30
 8003286:	415b      	adcs	r3, r3
 8003288:	637b      	str	r3, [r7, #52]	; 0x34
 800328a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800328e:	1912      	adds	r2, r2, r4
 8003290:	eb45 0303 	adc.w	r3, r5, r3
 8003294:	f04f 0000 	mov.w	r0, #0
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	00d9      	lsls	r1, r3, #3
 800329e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032a2:	00d0      	lsls	r0, r2, #3
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	1911      	adds	r1, r2, r4
 80032aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ac:	416b      	adcs	r3, r5
 80032ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	1891      	adds	r1, r2, r2
 80032bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80032be:	415b      	adcs	r3, r3
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032ca:	f7fc ff85 	bl	80001d8 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4b8c      	ldr	r3, [pc, #560]	; (8003504 <UART_SetConfig+0x38c>)
 80032d4:	fba3 1302 	umull	r1, r3, r3, r2
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	2164      	movs	r1, #100	; 0x64
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	3332      	adds	r3, #50	; 0x32
 80032e6:	4a87      	ldr	r2, [pc, #540]	; (8003504 <UART_SetConfig+0x38c>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032f4:	441e      	add	r6, r3
 80032f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f8:	4618      	mov	r0, r3
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	1894      	adds	r4, r2, r2
 8003304:	623c      	str	r4, [r7, #32]
 8003306:	415b      	adcs	r3, r3
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800330e:	1812      	adds	r2, r2, r0
 8003310:	eb41 0303 	adc.w	r3, r1, r3
 8003314:	f04f 0400 	mov.w	r4, #0
 8003318:	f04f 0500 	mov.w	r5, #0
 800331c:	00dd      	lsls	r5, r3, #3
 800331e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003322:	00d4      	lsls	r4, r2, #3
 8003324:	4622      	mov	r2, r4
 8003326:	462b      	mov	r3, r5
 8003328:	1814      	adds	r4, r2, r0
 800332a:	653c      	str	r4, [r7, #80]	; 0x50
 800332c:	414b      	adcs	r3, r1
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
 8003330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	1891      	adds	r1, r2, r2
 800333c:	61b9      	str	r1, [r7, #24]
 800333e:	415b      	adcs	r3, r3
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003346:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800334a:	f7fc ff45 	bl	80001d8 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <UART_SetConfig+0x38c>)
 8003354:	fba3 1302 	umull	r1, r3, r3, r2
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	2164      	movs	r1, #100	; 0x64
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	3332      	adds	r3, #50	; 0x32
 8003366:	4a67      	ldr	r2, [pc, #412]	; (8003504 <UART_SetConfig+0x38c>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	f003 0207 	and.w	r2, r3, #7
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4432      	add	r2, r6
 8003378:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800337a:	e0b9      	b.n	80034f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800337c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337e:	461c      	mov	r4, r3
 8003380:	f04f 0500 	mov.w	r5, #0
 8003384:	4622      	mov	r2, r4
 8003386:	462b      	mov	r3, r5
 8003388:	1891      	adds	r1, r2, r2
 800338a:	6139      	str	r1, [r7, #16]
 800338c:	415b      	adcs	r3, r3
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003394:	1912      	adds	r2, r2, r4
 8003396:	eb45 0303 	adc.w	r3, r5, r3
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	00d9      	lsls	r1, r3, #3
 80033a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033a8:	00d0      	lsls	r0, r2, #3
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	eb12 0804 	adds.w	r8, r2, r4
 80033b2:	eb43 0905 	adc.w	r9, r3, r5
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	008b      	lsls	r3, r1, #2
 80033ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033ce:	0082      	lsls	r2, r0, #2
 80033d0:	4640      	mov	r0, r8
 80033d2:	4649      	mov	r1, r9
 80033d4:	f7fc ff00 	bl	80001d8 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4b49      	ldr	r3, [pc, #292]	; (8003504 <UART_SetConfig+0x38c>)
 80033de:	fba3 2302 	umull	r2, r3, r3, r2
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	011e      	lsls	r6, r3, #4
 80033e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e8:	4618      	mov	r0, r3
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	1894      	adds	r4, r2, r2
 80033f4:	60bc      	str	r4, [r7, #8]
 80033f6:	415b      	adcs	r3, r3
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033fe:	1812      	adds	r2, r2, r0
 8003400:	eb41 0303 	adc.w	r3, r1, r3
 8003404:	f04f 0400 	mov.w	r4, #0
 8003408:	f04f 0500 	mov.w	r5, #0
 800340c:	00dd      	lsls	r5, r3, #3
 800340e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003412:	00d4      	lsls	r4, r2, #3
 8003414:	4622      	mov	r2, r4
 8003416:	462b      	mov	r3, r5
 8003418:	1814      	adds	r4, r2, r0
 800341a:	64bc      	str	r4, [r7, #72]	; 0x48
 800341c:	414b      	adcs	r3, r1
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003438:	0082      	lsls	r2, r0, #2
 800343a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800343e:	f7fc fecb 	bl	80001d8 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <UART_SetConfig+0x38c>)
 8003448:	fba3 1302 	umull	r1, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	2164      	movs	r1, #100	; 0x64
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	3332      	adds	r3, #50	; 0x32
 800345a:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <UART_SetConfig+0x38c>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003466:	441e      	add	r6, r3
 8003468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346a:	4618      	mov	r0, r3
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	1894      	adds	r4, r2, r2
 8003476:	603c      	str	r4, [r7, #0]
 8003478:	415b      	adcs	r3, r3
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003480:	1812      	adds	r2, r2, r0
 8003482:	eb41 0303 	adc.w	r3, r1, r3
 8003486:	f04f 0400 	mov.w	r4, #0
 800348a:	f04f 0500 	mov.w	r5, #0
 800348e:	00dd      	lsls	r5, r3, #3
 8003490:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003494:	00d4      	lsls	r4, r2, #3
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	eb12 0a00 	adds.w	sl, r2, r0
 800349e:	eb43 0b01 	adc.w	fp, r3, r1
 80034a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	008b      	lsls	r3, r1, #2
 80034b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034ba:	0082      	lsls	r2, r0, #2
 80034bc:	4650      	mov	r0, sl
 80034be:	4659      	mov	r1, fp
 80034c0:	f7fc fe8a 	bl	80001d8 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <UART_SetConfig+0x38c>)
 80034ca:	fba3 1302 	umull	r1, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2164      	movs	r1, #100	; 0x64
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	3332      	adds	r3, #50	; 0x32
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <UART_SetConfig+0x38c>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	f003 020f 	and.w	r2, r3, #15
 80034e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4432      	add	r2, r6
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	377c      	adds	r7, #124	; 0x7c
 80034f4:	46bd      	mov	sp, r7
 80034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fa:	bf00      	nop
 80034fc:	40011000 	.word	0x40011000
 8003500:	40011400 	.word	0x40011400
 8003504:	51eb851f 	.word	0x51eb851f

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4d0d      	ldr	r5, [pc, #52]	; (8003540 <__libc_init_array+0x38>)
 800350c:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	2600      	movs	r6, #0
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	4d0b      	ldr	r5, [pc, #44]	; (8003548 <__libc_init_array+0x40>)
 800351a:	4c0c      	ldr	r4, [pc, #48]	; (800354c <__libc_init_array+0x44>)
 800351c:	f000 f832 	bl	8003584 <_init>
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	2600      	movs	r6, #0
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	080039dc 	.word	0x080039dc
 8003544:	080039dc 	.word	0x080039dc
 8003548:	080039dc 	.word	0x080039dc
 800354c:	080039e0 	.word	0x080039e0

08003550 <memset>:
 8003550:	4402      	add	r2, r0
 8003552:	4603      	mov	r3, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <strncmp>:
 8003560:	b510      	push	{r4, lr}
 8003562:	b16a      	cbz	r2, 8003580 <strncmp+0x20>
 8003564:	3901      	subs	r1, #1
 8003566:	1884      	adds	r4, r0, r2
 8003568:	f810 3b01 	ldrb.w	r3, [r0], #1
 800356c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003570:	4293      	cmp	r3, r2
 8003572:	d103      	bne.n	800357c <strncmp+0x1c>
 8003574:	42a0      	cmp	r0, r4
 8003576:	d001      	beq.n	800357c <strncmp+0x1c>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f5      	bne.n	8003568 <strncmp+0x8>
 800357c:	1a98      	subs	r0, r3, r2
 800357e:	bd10      	pop	{r4, pc}
 8003580:	4610      	mov	r0, r2
 8003582:	e7fc      	b.n	800357e <strncmp+0x1e>

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
